//
// Grid system
// --------------------------------------------------
// Set the container width, and override it for fixed navbars in media queries
.container {
  .container-fixed();
}

// mobile first defaults
.row, .row-fluid, .col2-set {
  .make-row();
}

// Common styles for small and large grid columns
.col2-set .col-1,
.col2-set .col-2,
[class^="col-"],
[class*=" col-"] {
	position: relative;
	// Prevent columns from collapsing when empty
	min-height: 1px;
	// Inner gutter via padding
	padding-left:  (@grid-gutter-width / 2);
	padding-right: (@grid-gutter-width / 2);
}

// Super small grid
//
// Grid classes for Super small devices like smartphones. No offset, push, or
// pull classes are present here due to the size of the target.
//
// Note that `.col-xs-12` doesn't get floated on purpose—there's no need since
// it's full-width.
[class^="col-ss-"],
[class*=" col-ss-"] {
	float: left;
}
.col-ss-12 {
	float:none;
}
.col-ss-1  { width: percentage((1 / @grid-columns)); }
.col-ss-2  { width: percentage((2 / @grid-columns)); }
.col-ss-3  { width: percentage((3 / @grid-columns)); }
.col-ss-4  { width: 33.333333%; }
.col-ss-5  { width: percentage((5 / @grid-columns)); }
.col-ss-6  { width: percentage((6 / @grid-columns)); }
.col-ss-7  { width: percentage((7 / @grid-columns)); }
.col-ss-8  { width: percentage((8 / @grid-columns)); }
.col-ss-9  { width: percentage((9 / @grid-columns)); }
.col-ss-10 { width: percentage((10/ @grid-columns)); }
.col-ss-11 { width: percentage((11/ @grid-columns)); }
.col-ss-12 { width: 100%; }


// Extra small grid
//
// Grid classes for extra small devices like smartphones. No offset, push, or
// pull classes are present here due to the size of the target.
//
// Note that `.col-xs-12` doesn't get floated on purpose—there's no need since
// it's full-width.
@media (min-width: @screen-xs) {
[class^="col-xs-"],
[class*=" col-xs-"] {
	float: left;
}
.col-xs-12 {
	float:none;
}
.col-xs-1  { width: percentage((1 / @grid-columns)); }
.col-xs-2  { width: percentage((2 / @grid-columns)); }
.col-xs-25 { width: percentage((2.5 / @grid-columns)); }
.col-xs-3  { width: percentage((3 / @grid-columns)); }
.col-xs-4  { width: 33.333333%; }
.col-xs-5  { width: percentage((5 / @grid-columns)); }
.col-xs-6  { width: percentage((6 / @grid-columns)); }
.col-xs-7  { width: percentage((7 / @grid-columns)); }
.col-xs-8  { width: percentage((8 / @grid-columns)); }
.col-xs-9  { width: percentage((9 / @grid-columns)); }
.col-xs-10 { width: percentage((10/ @grid-columns)); }
.col-xs-11 { width: percentage((11/ @grid-columns)); }
.col-xs-12 { width: 100%; }
}

// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.
//
// Note that `.col-sm-12` doesn't get floated on purpose—there's no need since
// it's full-width.

@media (min-width: @screen-tablet) {
	.container {
		width: @container-tablet;
	}
	[class^="col-sm-"],
	[class*=" col-sm-"] {
		float: left;
	}
	.col-sm-12 {
		float:none;
	}
	.col-sm-1  { width: percentage((1 / @grid-columns)); }
	.col-sm-2  { width: percentage((2 / @grid-columns)); }
	.col-sm-25  { width: 20%; }
	.col-sm-3  { width: percentage((3 / @grid-columns)); }
	.col-sm-4  { width: 33.333333%; }
	.col-sm-5  { width: percentage((5 / @grid-columns)); }
	.col-sm-6  { width: percentage((6 / @grid-columns)); }
	.col-sm-7  { width: percentage((7 / @grid-columns)); }
	.col-sm-8  { width: percentage((8 / @grid-columns)); }
	.col-sm-9  { width: percentage((9 / @grid-columns)); }
	.col-sm-10 { width: percentage((10/ @grid-columns)); }
	.col-sm-11 { width: percentage((11/ @grid-columns)); }
	.col-sm-12 { width: 100%; }
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.
//
// Note that `.col-md-12` doesn't get floated on purpose—there's no need since
// it's full-width.

@media (min-width: @screen-desktop) {
	.container {
		width: @container-desktop;
	}
	.col2-set .col-1,
	.col2-set .col-2,
	[class^="col-md-"],
	[class*=" col-md-"] {
		float: left;
	}
	.col-md-12 {
		float:none;
	}
	.col-md-1, .span1  { width: percentage((1 / @grid-columns)); }
	.col-md-2, .span2  { width: percentage((2 / @grid-columns)); }
	.col-md-25  { width: 20%; }
	.col-md-3, .span3  { width: percentage((3 / @grid-columns)); }
	.col-md-4, .span4  { width: 33.333333%; }
	.col-md-5, .span5  { width: percentage((5 / @grid-columns)); }
	.col-md-6, .span6, .col2-set .col-1, .col2-set .col-2 { width: percentage((6 / @grid-columns)); }
	.col-md-7, .span7  { width: percentage((7 / @grid-columns)); }
	.col-md-8, .span8  { width: percentage((8 / @grid-columns)); }
	.col-md-9, .span9  { width: percentage((9 / @grid-columns)); }
	.col-md-10, .span10 { width: percentage((10/ @grid-columns)); }
	.col-md-11, .span11 { width: percentage((11/ @grid-columns)); }
	.col-md-12, .span12, .woocommerce form .form-row-wide, .woocommerce-page form .form-row-wide { width: 100%; }
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.
//
// Note that `.col-lg-12` doesn't get floated on purpose—there's no need since
// it's full-width.

@media (min-width: @screen-lg-desktop) {
	.container {
		width: @container-lg-desktop;
	}
	[class^="col-lg-"],
	[class*=" col-lg-"] {
		float: left;
	}
	.col-lg-12 {
		float:none;
	}
	.col-lg-1  { width: percentage((1 / @grid-columns)); }
	.col-lg-2  { width: percentage((2 / @grid-columns)); }
	.col-lg-25  { width: 20%; }
	.col-lg-3  { width: percentage((3 / @grid-columns)); }
	.col-lg-4  { width: 33.333333%; }
	.col-lg-5  { width: percentage((5 / @grid-columns)); }
	.col-lg-6  { width: percentage((6 / @grid-columns)); }
	.col-lg-7  { width: percentage((7 / @grid-columns)); }
	.col-lg-8  { width: percentage((8 / @grid-columns)); }
	.col-lg-9  { width: percentage((9 / @grid-columns)); }
	.col-lg-10 { width: percentage((10/ @grid-columns)); }
	.col-lg-11 { width: percentage((11/ @grid-columns)); }
	.col-lg-12 { width: 100%; }
}
